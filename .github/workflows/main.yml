name: functional test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  check_all_configs:

    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        # github runner with python 3.5 currently fails to install this package

    steps:

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        pip --verbose install git+https://github.com/a13xp0p0v/kconfig-hardened-check
        echo ">>>>> first start <<<<<"
        kconfig-hardened-check

    - name: Check all configs with the installed tool
      run: |
        echo ">>>>> check all configs <<<<<"
        CONFIG_DIR=`find /opt/hostedtoolcache/Python/ -name config_files`
        CONFIGS=`find $CONFIG_DIR -type f | grep "\.config"`
        COUNT=0
        for C in $CONFIGS
        do
                COUNT=$(expr $COUNT + 1)
                echo -e "\n>>>>> checking config number $COUNT <<<<<"
                kconfig-hardened-check -c $C
        done
        echo -e "\n>>>>> checking $COUNT configs is done <<<<<"

    - name: Get source code for collecting coverage
      uses: actions/checkout@v2

    - name: Collect coverage for the basic functionality
      run: |
        echo ">>>>> get help <<<<<"
        coverage run -a --branch bin/kconfig-hardened-check
        coverage run -a --branch bin/kconfig-hardened-check -h

        echo ">>>>> get version <<<<<"
        coverage run -a --branch bin/kconfig-hardened-check --version

        echo ">>>>> print the security hardening preferences <<<<<"
        coverage run -a --branch bin/kconfig-hardened-check -p X86_64
        coverage run -a --branch bin/kconfig-hardened-check -p X86_64 -m verbose
        coverage run -a --branch bin/kconfig-hardened-check -p X86_64 -m json

        coverage run -a --branch bin/kconfig-hardened-check -p X86_32
        coverage run -a --branch bin/kconfig-hardened-check -p X86_32 -m verbose
        coverage run -a --branch bin/kconfig-hardened-check -p X86_32 -m json

        coverage run -a --branch bin/kconfig-hardened-check -p ARM64
        coverage run -a --branch bin/kconfig-hardened-check -p ARM64 -m verbose
        coverage run -a --branch bin/kconfig-hardened-check -p ARM64 -m json

        coverage run -a --branch bin/kconfig-hardened-check -p ARM
        coverage run -a --branch bin/kconfig-hardened-check -p ARM -m verbose
        coverage run -a --branch bin/kconfig-hardened-check -p ARM -m json

        echo ">>>>> use local cmdline as an example <<<<<"
        cat /proc/cmdline

        echo ">>>>> check the example kconfig files and cmdline <<<<<"
        CONFIG_DIR=`find . -name config_files`
        CONFIGS=`find $CONFIG_DIR -type f | grep "\.config"`
        COUNT=0
        for C in $CONFIGS
        do
                COUNT=$(expr $COUNT + 1)
                echo -e "\n>>>>> checking config number $COUNT <<<<<"
                coverage run -a --branch bin/kconfig-hardened-check -c $C -l /proc/cmdline
                coverage run -a --branch bin/kconfig-hardened-check -c $C -l /proc/cmdline -m verbose > /dev/null
                coverage run -a --branch bin/kconfig-hardened-check -c $C -l /proc/cmdline -m json
                coverage run -a --branch bin/kconfig-hardened-check -c $C -l /proc/cmdline -m show_ok
                coverage run -a --branch bin/kconfig-hardened-check -c $C -l /proc/cmdline -m show_fail
        done
        echo -e "\n>>>>> checking $COUNT configs is done <<<<<"

    - name: Collect coverage for error handling
      run: |
        echo ">>>>> lonely -l <<<<<"
        ! coverage run -a --branch bin/kconfig-hardened-check -l /proc/cmdline

        echo ">>>>> wrong modes for -p  <<<<<"
        ! coverage run -a --branch bin/kconfig-hardened-check -p X86_64 -m show_ok
        ! coverage run -a --branch bin/kconfig-hardened-check -p X86_64 -m show_fail

        echo ">>>>> -p and -c together <<<<<"
        ! coverage run -a --branch bin/kconfig-hardened-check -p X86_64 -c kconfig_hardened_check/config_files/distros/fedora_34.config

        cp kconfig_hardened_check/config_files/distros/fedora_34.config ./test.config

        echo ">>>>> no kernel version <<<<<"
        sed '3d' test.config > error.config
        ! coverage run -a --branch bin/kconfig-hardened-check -c error.config

        echo ">>>>> strange kernel version string <<<<<"
        sed  '3 s/5./version 5./' test.config > error.config
        ! coverage run -a --branch bin/kconfig-hardened-check -c error.config

        echo ">>>>> no arch <<<<<"
        sed  '305d' test.config > error.config
        ! coverage run -a --branch bin/kconfig-hardened-check -c error.config

        echo ">>>>> more than one arch <<<<<"
        cp test.config error.config
        echo  'CONFIG_ARM64=y' >> error.config
        ! coverage run -a --branch bin/kconfig-hardened-check -c error.config

        echo ">>>>> invalid disabled kconfig option <<<<<"
        sed  '28 s/is not set/is not set yet/' test.config > error.config
        ! coverage run -a --branch bin/kconfig-hardened-check -c error.config

    - name: Prepare final coverage report
      run: |
        coverage xml -i -o coverage.xml

    - name: Handle coverage
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        flags: functional_test
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

